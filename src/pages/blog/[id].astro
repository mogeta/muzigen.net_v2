---
import Layout from '../../layouts/Layout.astro';
import type { BlogArticle } from '../../types/blog';
import { getFirestore } from 'firebase-admin/firestore';
import { app } from '../../firebase/server';
import { renderMarkdown, sanitizeHtml } from '../../utils/markdown';

export async function getStaticPaths() {
  const db = getFirestore(app);
  
  try {
    const snapshot = await db.collection('blog_contents')
      .where('publish', '==', true)
      .get();
    
    return snapshot.docs.map((doc) => {
      const data = doc.data();
      
      // Process elements and convert markdown to HTML
      const processedElements = (data.elements || []).map((element: any) => ({
        source: element.source || '',
        type: element.type || '',
        safeHTML: element.type === 'markdown' && element.source 
          ? sanitizeHtml(renderMarkdown(element.source))
          : sanitizeHtml(element.safeHTML || element.source || ''),
      }));

      const article: BlogArticle = {
        id: doc.id,
        title: data.title || '',
        description: data.description || '',
        ogp_image: data.ogp_image || '',
        content: data.content ? sanitizeHtml(renderMarkdown(data.content)) : '',
        tag: data.tag || '',
        content_url: data.content_url || '',
        markdown_url: data.markdown_url || '',
        update_date: data.update_date?.toDate?.()?.toISOString() || data.update_date || '',
        created_date: data.created_date?.toDate?.()?.toISOString() || data.created_date || '',
        publish: data.publish || false,
        elements: processedElements,
      };

      return {
        params: { id: doc.id },
        props: { article }
      };
    });
  } catch (error) {
    console.error('Error fetching blog posts:', error);
    return [];
  }
}

const { article } = Astro.props;
---

<Layout title={article.title}>
  <main class="max-w-4xl mx-auto px-4 py-8">
    <article class="prose lg:prose-xl mx-auto">
        <!-- Header -->
        <header class="mb-8 not-prose">
          <h1 class="text-4xl font-bold mb-4 text-gray-900">
            {article.title}
          </h1>
          
          <div class="flex items-center gap-4 text-sm text-gray-600 mb-6">
            {article.tag && (
              <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                {article.tag}
              </span>
            )}
            {article.created_date && (
              <time datetime={article.created_date}>
                {new Date(article.created_date).toLocaleDateString('ja-JP', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            )}
            {article.update_date && article.update_date !== article.created_date && (
              <span>
                (更新: {new Date(article.update_date).toLocaleDateString('ja-JP', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric'
                })})
              </span>
            )}
          </div>

          {article.description && (
            <p class="text-lg text-gray-600 leading-relaxed mb-6">
              {article.description}
            </p>
          )}

          {article.ogp_image && (
            <img 
              src={article.ogp_image} 
              alt={article.title}
              class="w-full h-64 object-cover rounded-lg mb-8"
            />
          )}
        </header>

        <!-- Content -->
        <div class="markdown-content">
          {article.content ? (
            <div set:html={article.content} />
          ) : article.elements && article.elements.length > 0 ? (
            <div>
              {article.elements.map((element) => (
                <div class="element-content">
                  <div set:html={element.safeHTML} />
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-500">コンテンツがありません。</p>
          )}
        </div>

        <!-- Footer -->
        <footer class="mt-12 pt-8 border-t border-gray-200 not-prose">
          <div class="flex justify-between items-center">
            <a 
              href="/blog" 
              class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium"
            >
              ← 記事一覧に戻る
            </a>
            
            {article.markdown_url && (
              <a 
                href={article.markdown_url}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-gray-600 hover:text-gray-800"
              >
                Markdown を表示
              </a>
            )}
          </div>
        </footer>
      </article>
  </main>
</Layout>

<style>
  .prose {
    max-width: none;
  }
  
  .markdown-content {
    /* Markdown content styling is handled by the custom renderer */
  }
  
  .element-content {
    /* Individual element styling */
  }
</style>